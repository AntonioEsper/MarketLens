# marketlens/pages/3_üî¨_Scanner_de_Mercado.py

import streamlit as st
import pandas as pd
from view_utils import setup_sidebar
from utils.config import ASSET_CATEGORIES
from utils.scoring_engine import calculate_synapse_score

# --- CONFIGURA√á√ÉO DA P√ÅGINA E AUTENTICA√á√ÉO ---
st.set_page_config(layout="wide", page_title="Scanner de Mercado")
setup_sidebar()

# Guarda de autentica√ß√£o
if 'user_info' not in st.session_state or st.session_state['user_info'] is None:
    st.warning("Acesso restrito. Por favor, fa√ßa o login.")
    st.stop()

# --- T√çTULO DA P√ÅGINA ---
st.title("üî¨ Scanner de Mercado")
st.caption("An√°lise multifatorial para identificar os ativos com o maior vi√©s direcional.")
st.markdown("---")

# --- L√ìGICA DE C√ÅLCULO E EXIBI√á√ÉO ---
try:
    with st.spinner("A analisar o mercado... O nosso motor est√° a calcular os scores para todos os ativos."):
        # 1. Obter a lista completa de ativos a partir da configura√ß√£o
        all_assets = []
        for category, assets in ASSET_CATEGORIES.items():
            all_assets.extend(assets)
        
        # 2. Iterar sobre cada ativo e calcular o seu score
        scan_results = []
        progress_bar = st.progress(0, text="A analisar ativos...")
        total_assets = len(all_assets)
        
        for i, asset_name in enumerate(all_assets):
            total_score, verdict, individual_scores = calculate_synapse_score(asset_name)
            
            # 3. Montar o dicion√°rio de resultados para a tabela
            result = {
                "Ativo": asset_name,
                "Score": total_score,
                "Veredito": verdict,
                "COT": individual_scores.get('COT', {}).get('text', 'N/A'),
                "Sazonalidade": individual_scores.get('Sazonalidade', {}).get('text', 'N/A')
            }
            scan_results.append(result)
            
            # Atualizar a barra de progresso
            progress_text = f"A analisar {asset_name} ({i+1}/{total_assets})"
            progress_bar.progress((i + 1) / total_assets, text=progress_text)
        
        progress_bar.empty() # Limpar a barra de progresso ap√≥s a conclus√£o

    # 4. Converter os resultados para um DataFrame do Pandas
    if scan_results:
        df_scan = pd.DataFrame(scan_results)
        df_scan = df_scan.sort_values(by="Score", ascending=False)
        
        # 5. Aplicar estilo para replicar o heatmap da refer√™ncia
        st.dataframe(
            df_scan.style.background_gradient(
                cmap='RdYlGn', # Gradiente de Vermelho -> Amarelo -> Verde
                subset=['Score'],
                vmin=-4, # Valor m√≠nimo para o score
                vmax=4   # Valor m√°ximo para o score
            ).format({
                "Score": "{:+.0f}" # Formata o score para ter sinal (+/-)
            }),
            use_container_width=True,
            height=800
        )
    else:
        st.error("N√£o foi poss√≠vel gerar a an√°lise do scanner.")

except Exception as e:
    st.error(f"Ocorreu um erro inesperado ao gerar o scanner: {e}")
# --- FIM DO M√ìDULO Scanner_de_Mercado.py ---