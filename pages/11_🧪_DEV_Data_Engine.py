# marketlens/pages/10_üß™_DEV_Data_Engine.py

import streamlit as st
from view_utils import setup_sidebar

# --- CONFIGURA√á√ÉO DA P√ÅGINA E AUTENTICA√á√ÉO ---
st.set_page_config(layout="wide", page_title="DEV | Motores de Dados")
setup_sidebar()

if 'user_info' not in st.session_state or st.session_state['user_info'] is None:
    st.warning("Acesso restrito. Por favor, fa√ßa o login.")
    st.stop()

# --- INTERFACE DA P√ÅGINA ---
st.title("üß™ Sala de Controlo dos Motores de Dados")
st.caption("Esta p√°gina √© uma ferramenta de desenvolvimento para popular o Firestore.")
st.warning("A execu√ß√£o destes motores pode consumir recursos. Use com modera√ß√£o.")
st.markdown("---")

# --- MOTOR DE DADOS ECON√ìMICOS ---
st.header("Motor de Dados Econ√≥micos (FRED)")
if st.button("Executar Atualiza√ß√£o de Dados Econ√≥micos (FRED)"):
    from utils.economic_engine import update_fred_data_in_firestore
    
    with st.spinner("A conectar ao motor de dados econ√≥micos..."):
        # Esta fun√ß√£o ainda n√£o foi convertida para um gerador, ser√° executada de uma vez.
        update_fred_data_in_firestore()
    st.success("Processo de atualiza√ß√£o dos dados econ√≥micos conclu√≠do!")

st.markdown("---")

# --- MOTOR DE DADOS DE POSICIONAMENTO (COT) ---
st.header("Motor de Dados de Posicionamento (COT)")
if st.button("Executar Atualiza√ß√£o de Dados de Posicionamento (COT)", key="cot_update_button"):
    from utils.cot_engine import update_cot_data_in_firestore
    
    # Usamos st.status para criar uma caixa que se atualiza com o progresso
    with st.status("A executar o motor de dados do COT...", expanded=True) as status:
        # A fun√ß√£o agora √© um gerador, ent√£o iteramos sobre as mensagens que ela emite
        for message in update_cot_data_in_firestore():
            st.write(message) # Exibe cada mensagem de progresso na caixa de status
        
        status.update(label="Motor do COT conclu√≠do!", state="complete")

st.markdown("---")

# --- MOTOR DE DADOS DE SAZONALIDADE ---
st.header("Motor de Dados de Sazonalidade")
if st.button("Executar C√°lculo e Armazenamento de Sazonalidade"):
    from utils.seasonality_engine import update_seasonality_data_in_firestore
    
    # O motor de sazonalidade tamb√©m deve ser um gerador para um melhor feedback
    with st.status("A executar o motor de sazonalidade...", expanded=True) as status:
        for message in update_seasonality_data_in_firestore():
            st.write(message)
        status.update(label="Motor de sazonalidade conclu√≠do!", state="complete")

