# marketlens/pages/10_游빍_DEV_Data_Engine.py

import streamlit as st
from view_utils import setup_sidebar
from utils.config import FRED_SERIES_MAP, ASSET_CATEGORIES

# --- CONFIGURA칂츾O DA P츼GINA E AUTENTICA칂츾O ---
st.set_page_config(layout="wide", page_title="DEV | Motores de Dados")
setup_sidebar()

if 'user_info' not in st.session_state or st.session_state['user_info'] is None:
    st.warning("Acesso restrito. Por favor, fa칞a o login.")
    st.stop()

# --- INTERFACE DA P츼GINA ---
st.title("游빍 Sala de Controlo e Laborat칩rio de Testes")
st.caption("Esta p치gina 칠 uma ferramenta de desenvolvimento para popular o Firestore e validar a l칩gica de scoring.")
st.warning("A execu칞칚o dos motores de dados pode consumir recursos. Use com modera칞칚o.")
st.markdown("---")

# --- ABAS PARA ORGANIZA칂츾O ---
tab_engines, tab_scoring_lab = st.tabs(["Motores de Dados", "Laborat칩rio de Scoring"])

with tab_engines:
    st.header("Execu칞칚o dos Motores de Coleta de Dados")
    
    # --- MOTOR DE DADOS ECON칍MICOS ---
    st.subheader("Motor de Dados Econ칩micos (FRED)")
    if st.button("Executar Atualiza칞칚o de Dados Econ칩micos (FRED)"):
        from utils.economic_engine import update_fred_data_in_firestore
        with st.status("A executar o motor de dados econ칩micos...", expanded=True) as status:
            for message in update_fred_data_in_firestore():
                st.write(message)
            status.update(label="Motor do FRED conclu칤do!", state="complete")

    st.markdown("---")

    # --- MOTOR DE DADOS DE POSICIONAMENTO ---
    st.subheader("Motor de Dados de Posicionamento (COT)")
    if st.button("Executar Atualiza칞칚o de Dados de Posicionamento (COT)"):
        from utils.cot_engine import update_cot_data_in_firestore
        with st.status("A executar o motor de dados do COT...", expanded=True) as status:
            for message in update_cot_data_in_firestore():
                st.write(message)
            status.update(label="Motor do COT conclu칤do!", state="complete")

    st.markdown("---")

    # --- MOTOR DE DADOS DE SAZONALIDADE ---
    st.subheader("Motor de Dados de Sazonalidade")
    if st.button("Executar C치lculo e Armazenamento de Sazonalidade"):
        from utils.seasonality_engine import update_seasonality_data_in_firestore
        with st.status("A executar o motor de sazonalidade...", expanded=True) as status:
            for message in update_seasonality_data_in_firestore():
                st.write(message)
            status.update(label="Motor de sazonalidade conclu칤do!", state="complete")


with tab_scoring_lab:
    st.header("游댧 Laborat칩rio de Testes do Motor de Scoring")
    st.write("Use esta sec칞칚o para validar a l칩gica de c치lculo dos scores em tempo real.")
    st.markdown("---")

    # Importa as fun칞칫es de scoring aqui para garantir que a vers칚o mais recente seja usada
    from utils.scoring_engine import calculate_overall_economic_score, calculate_synapse_score
    
    # --- Painel de Teste para Scores Econ칩micos por Moeda ---
    st.subheader("Valida칞칚o do Score Econ칩mico Agregado por Moeda")
    if st.button("Calcular Scores Econ칩micos"):
        currencies = sorted(list(set(info['currency'] for info in FRED_SERIES_MAP.values())))
        with st.spinner("A calcular scores econ칩micos..."):
            for currency in currencies:
                score = calculate_overall_economic_score(currency)
                st.metric(label=f"Score Econ칩mico para {currency}", value=f"{score:.2f}")

    st.markdown("---")
    
    # --- Painel de Teste para o Synapse Score de um Ativo ---
    st.subheader("Valida칞칚o do Synapse Score para um Ativo Espec칤fico")
    
    # Cria a lista de ativos a partir do ASSET_CATEGORIES
    asset_options = []
    for category, assets in ASSET_CATEGORIES.items():
        asset_options.extend(assets)
        
    selected_asset = st.selectbox("Selecione um Ativo para Testar:", options=asset_options)
    
    if st.button(f"Calcular Synapse Score para {selected_asset}"):
        with st.spinner(f"A analisar {selected_asset}..."):
            final_score, verdict, individual_scores = calculate_synapse_score(selected_asset)
            
            st.metric(label=f"Score Final para {selected_asset}", value=f"{final_score:.2f}", delta=verdict)
            
            st.write("Scores Individuais:")
            st.json(individual_scores)

